from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from states import States
import config
import pandas
import numpy as np
from numpy.linalg import norm

spec_xlsx = pandas.read_excel('spec.xlsx')

i = 0
j = 1
spec_list = []
spec_df = pandas.DataFrame(columns=["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", '–°–ø–∏—Å–æ–∫', "url"])

# —Ç—É—Ç —è –∑–∞—á–µ–º-—Ç–æ –ø–æ—á–µ–º—É-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é while, –∞ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ for —á–µ-—Ç–æ —É–∂–µ –Ω–µ —Ö–æ—á—É
while True:
    if i == 28:
        break
    if j == 7:
        spec_df.loc[len(spec_df.index)] = [spec_xlsx.loc[i][0], spec_list, spec_xlsx.loc[i][7]]
        spec_list = []
        j = 1
        i += 1
        continue
    spec_list.append(spec_xlsx.loc[i][j])
    j += 1

print(spec_df)


questions = pandas.read_excel('proftest.xlsx')
cnt_types=questions['type'].value_counts()

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

business_inf = np.array([0.4,0.2,0,0,0,0.4])
prik_math = np.array([1,0,0,0,0,0])

@dp.message_handler(commands="start")
async def start(message: types.Message):
    keyboard_start = types.InlineKeyboardMarkup()
    keyboard_start.add(types.InlineKeyboardButton(text="–ü—Ä–æ—Ñ—Ç–µ—Å—Ç", callback_data="prof"))
    keyboard_start.add(types.InlineKeyboardButton(text="–ö–∞–Ω–∞–ª –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –í–í–ì–£", callback_data="kanal"))
    await message.answer("–í—ã–±–µ—Ä–∏", reply_markup=keyboard_start)


# –¢—É—Ç —è —Å–æ–∑–¥–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ state (—Å—á–µ—Ç—á–∏–∫ –Ω–∞ –∫–∞–∫–æ–º –≤–æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å), –Ω–µ –∑–Ω–∞—é –∫—É–¥–∞ –µ–≥–æ –µ—â–µ –∑–∞–ø–∏—Ö–Ω—É—Ç—å
@dp.callback_query_handler(state=None)
async def callBack_handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    if call.data == "prof":
        await call.message.answer("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Proforio")
        await call.message.answer("–°–µ–≥–æ–¥–Ω—è —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")
        await call.message.answer("–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 34 –≤–æ–ø—Ä–æ—Å–∞, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
        await call.message.answer("–í—ã–±–∏—Ä–∞–π –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è —Ç–µ–±—è –∏ –ø–æ–º–Ω–∏: –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∑–¥–µ—Å—å –Ω–µ—Ç, —Ç–∞–∫ —á—Ç–æ –Ω–µ –¥—É–º–∞–π –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
        await call.message.answer("–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–∏—Ö–æ–¥—è—â–∏–π –Ω–∞ —É–º, –æ–±—ã—á–Ω–æ —Å–∞–º—ã–π —Ç–æ—á–Ω—ã")
        await call.message.answer("–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º —Å—Ç–æ–∏—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, —Ö–æ—Ä–æ—à–æ?")
        await call.message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await States.get_name.set()


@dp.message_handler(state=States.get_name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data({'name': message.text}) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    await message.answer(text=f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {message.text}")
    await message.answer(text='–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ–±–µ—â–∞—é –Ω–µ –∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ—á–∞–ºüôÇ')
    await States.next()


@dp.message_handler(state=States.get_phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data({'phone': message.text}) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(text='–ù—É –∏ e-mail, –µ—Å–ª–∏ –æ–Ω —É —Ç–µ–±—è –µ—Å—Ç—å')
    await States.next()


@dp.message_handler(state=States.get_email)
async def get_email(message: types.Message, state: FSMContext):
    await state.update_data({'email': message.text}) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email
    await States.next()
    await start_question(message.chat.id, state)


# —è —Ç–∞–∫ —Å–¥–µ–ª–∞–ª –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –ø–æ—è–≤–∏–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ question, –∏ —è —Ä–µ—à–∏–ª –µ–µ —Ç–∞–∫ —Ä–µ—à–∏—Ç—å 
async def start_question(user, state):
    await state.update_data({'number': 0})
    await state.update_data({'business': 0})
    await state.update_data({'risk': 0})
    await state.update_data({'science': 0})
    await state.update_data({'technic': 0})
    await state.update_data({'communication': 0})
    await state.update_data({'nature': 0})
    await state.update_data({'sign': 0})
    await state.update_data({'art': 0})
    start_question_keyboard = types.InlineKeyboardMarkup()
    start_question_keyboard.add(types.InlineKeyboardButton(text="–î–∞", callback_data="–î–∞"))
    start_question_keyboard.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="–ù–µ—Ç"))
    await bot.send_message(chat_id=user, text="–ù–∞—á–Ω–µ–º?", reply_markup=start_question_keyboard)


@dp.callback_query_handler(state=States.prof)
async def question(call: types.CallbackQuery, state: FSMContext):
    if call.data == '–ù–µ—Ç':
        await state.finish()
        await call.message.answer(text="–°—é–¥–∞ –º–± —Ç–µ–∫—Å—Ç –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å")
    else:
        print(await state.get_state())
        try:
            await call.message.edit_reply_markup(reply_markup=None)
        except:
            None

        data = await state.get_data()
        number = data['number']

        if call.data == 'yes':
            print("yes")
            print(questions['type'][number-1])
            score_type = data[questions['type'][number-1]]
            if not pandas.isnull(questions.loc[number-1, 'gif_yes']):
                await call.message.answer_video(questions['gif_yes'][number-1])
            await call.message.answer(text=questions['answer_yes'][number-1])
            await state.update_data({questions['type'][number-1]: score_type + 1})
        elif call.data == 'no':
            if not pandas.isnull(questions.loc[number-1, 'gif_no']):
                await call.message.answer_video(questions['gif_no'][number-1])
            await call.message.answer(text=questions['answer_no'][number-1])

        if number <= 33:
            print(number)
            keyboard_answer = types.InlineKeyboardMarkup()
            keyboard_answer.add(types.InlineKeyboardButton(text=questions['button_yes'][number], callback_data="yes"))
            keyboard_answer.add(types.InlineKeyboardButton(text=questions['button_no'][number], callback_data='no'))
            await call.message.answer(text=questions['qtext'][number], reply_markup=keyboard_answer)
            number = data['number'] + 1
            await state.update_data({'number': number})
        else:
            await end_prof(call.message.chat.id, state)


async def end_prof(user, state):
    data = await state.get_data()
    user_score = []
    for i in ['sign','communication','art','technic','nature','business']:
        user_score.append(data[i]/cnt_types[i])
    user_score = np.array(user_score)
    user_df = pandas.DataFrame(columns=['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏', 'url'])

    for i in range(0, 28):
        spec_score = np.array(spec_df.loc[i][1])
        user_df.loc[len(user_df.index)] = [spec_df.loc[i][0], norm(user_score-spec_score, ord=1), spec_df.loc[i][2]]
    user_df.sort_values(by='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏')
    print(user_df)
    for i in range(0, 5):
        await bot.send_message(chat_id=user, text=f'{i+1} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n'
                                             f'{user_df.loc[i][0]}\n'
                                             f'{user_df.loc[i][2]}')


    


executor.start_polling(dp, skip_updates=True)